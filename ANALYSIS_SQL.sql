use bank_loan;
select count(*) from loan_data;
select * from loan_data limit 5;
-- Key Performance Indicators (KPIs)--

-- Total Loan Applications--
SELECT COUNT(ID) AS TOTAL_LOAN_APPLICATIONS FROM LOAN_DATA;

-- MTD_Loan Applications
SELECT COUNT(ID) AS MTD_LOAN_APPLICATIONS FROM LOAN_DATA
WHERE MONTH(ISSUE_DATE) = 12;

-- PMTD LOAN APPLICATIONS--
SELECT COUNT(ID) AS PMTD_LOAN_APPLICATIONS FROM LOAN_DATA
WHERE MONTH(ISSUE_DATE) = 11;

-- MOVING DIFFERENCE OF LOAN APPLICATIONS--
SELECT
DATE_FORMAT(ISSUE_DATE, '%Y-%m') AS MONTH_YEAR,
COUNT(ID) AS TOTAL_APPLICATIONS,
COUNT(ID) - LAG(COUNT(ID)) OVER (ORDER BY DATE_FORMAT(ISSUE_DATE, '%Y-%m')) AS MOVING_DIFFERENCE
FROM LOAN_DATA
WHERE YEAR(ISSUE_DATE) = 2021
GROUP BY MONTH_YEAR
ORDER BY MONTH_YEAR;



SELECT 
    DATE_FORMAT(ISSUE_DATE, '%Y-%m') AS MONTH_YEAR,
    COUNT(ID) AS LOAN_APPLICATION_COUNT,
    COUNT(ID) - LAG(COUNT(ID)) OVER (ORDER BY DATE_FORMAT(ISSUE_DATE, '%Y-%m')) AS MOVING_DIFFERENCE
FROM 
    LOAN_DATA
WHERE 
    YEAR(ISSUE_DATE) = 2021
GROUP BY 
    MONTH_YEAR
ORDER BY 
    MONTH_YEAR;

-- TOTAL FUNDED AMOUNT--

SELECT SUM(LOAN_AMOUNT) AS TOTAL_FUNDED_AMT FROM LOAN_DATA;

WITH MONTHLY_TOTALS AS 
(SELECT 
	DATE_FORMAT(ISSUE_DATE, '%Y-%m') AS MONTH_YEAR,
	SUM(LOAN_AMOUNT) AS TOTAL_FUNDED_AMT
    FROM LOAN_DATA
    WHERE YEAR(ISSUE_DATE) = 2021
    GROUP BY MONTH_YEAR
    )
   SELECT 
   MONTH_YEAR,
   TOTAL_FUNDED_AMT,
   TOTAL_FUNDED_AMT - LAG(TOTAL_FUNDED_AMT) OVER (ORDER BY MONTH_YEAR) AS MOM_CHANGE,
   SUM(TOTAL_FUNDED_AMT) OVER (ORDER BY MONTH_YEAR ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS MTD_TOTAL_FUNDED_AMOUNT
FROM MONTHLY_TOTALS;

-- TOTAL AMOUNT RECEIVED--

SELECT SUM(TOTAL_PAYMENT) AS TOTAL_AMT_RECEIVED FROM LOAN_DATA;

WITH MONTHLY_PAYMENTS AS (
SELECT DATE_FORMAT(ISSUE_DATE, '%Y-%m') AS MONTH_YEAR,
SUM(TOTAL_PAYMENT) AS TOTAL_AMT_RECEIVED
FROM LOAN_DATA
WHERE YEAR(ISSUE_DATE) = 2021
GROUP BY MONTH_YEAR)
SELECT 
MONTH_YEAR,
TOTAL_AMT_RECEIVED,
SUM(TOTAL_AMT_RECEIVED) OVER( ORDER BY MONTH_YEAR ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS MTD_AMT_RECEIVED
FROM MONTHLY_PAYMENTS
ORDER BY MONTH_YEAR;

-- AVERAGE INTEREST RATE--
SELECT AVG(INT_RATE)*100 AS AVG_INTEREST_RATE FROM LOAN_DATA;

WITH MONTHLY_RATES AS (
SELECT DATE_FORMAT(ISSUE_DATE, '%Y-%m') AS MONTH_YEAR,
AVG(INT_RATE)*100 AS AVG_INTEREST_RATE
FROM LOAN_DATA
WHERE YEAR(ISSUE_DATE) = 2021
GROUP BY MONTH_YEAR)
SELECT
MONTH_YEAR,
AVG_INTEREST_RATE,
AVG_INTEREST_RATE - LAG(AVG_INTEREST_RATE) OVER(ORDER BY MONTH_YEAR) AS MOM_CHANGE,
AVG(AVG_INTEREST_RATE) OVER(ORDER BY MONTH_YEAR ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS MTD_AVG_INTEREST_RATE
FROM MONTHLY_RATES
GROUP BY MONTH_YEAR;

-- AVERAGE DEPTH-TO-INCOME(DTI) RATIO--

SELECT ROUND(AVG(DTI)*100, 2) AS AVG_DTI FROM LOAN_DATA;

WITH MONTHLY_DTI AS (
SELECT DATE_FORMAT(ISSUE_DATE, '%Y-%m') AS MONTH_YEAR,
ROUND(AVG(DTI)*100,2) AS AVG_DTI
FROM LOAN_DATA
WHERE YEAR(ISSUE_DATE) = 2021
GROUP BY MONTH_YEAR)
SELECT MONTH_YEAR,
AVG_DTI,
AVG_DTI - LAG(AVG_DTI) OVER(ORDER BY MONTH_YEAR) AS MOM_AVG_DTI,
AVG(AVG_DTI) OVER (ORDER BY MONTH_YEAR ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS MTD_AVG_DTI
FROM MONTHLY_DTI
GROUP BY MONTH_YEAR;

-- GOOD LOAN ISSUED--
-- GOOD LOAN PERCENTAGE

SELECT
(COUNT(CASE WHEN LOAN_STATUS = "Fully Paid" or LOAN_STATUS = "Current" THEN ID END)*100)/
(COUNT(ID)) AS GOOD_LOAN_PERCENTAGE
FROM LOAN_DATA;

-- GOOD_LOAN APPLICATIONS--
SELECT COUNT(ID) AS GOOD_LOAN_APPLICATIONS FROM LOAN_DATA 
WHERE LOAN_STATUS = "Fully Paid" or LOAN_STATUS = "Current";

-- GOOD LOAN FUNDED MOUNT

SELECT SUM(LOAN_AMOUNT) AS TOTAL_LOAN_FUNDED FROM LOAN_DATA
WHERE LOAN_STATUS = "Fully Paid" or LOAN_STATUS = "Current";

-- GOOD LOAN AMOUNT RECEIVED--
SELECT SUM(TOTAL_PAYMENT) AS TOTAL_AMOUNT_RECEIVED FROM LOAN_DATA
WHERE LOAN_STATUS = "Fully Paid" or LOAN_STATUS = "Current";

-- BAD LOAN ISSUED--
-- BAD LOAN PERCENTAGE

SELECT
(COUNT(CASE WHEN LOAN_STATUS = "Charged Off" THEN ID END)*100)/
(COUNT(ID)) AS BAD_LOAN_PERCENTAGE
FROM LOAN_DATA;

-- BAD_LOAN APPLICATIONS--
SELECT COUNT(ID) AS BAD_LOAN_APPLICATIONS FROM LOAN_DATA 
WHERE LOAN_STATUS =  "Charged Off";

-- BAD LOAN FUNDED MOUNT

SELECT SUM(LOAN_AMOUNT) AS TOTAL_LOAN_FUNDED FROM LOAN_DATA
WHERE LOAN_STATUS =  "Charged Off";

-- BAD LOAN AMOUNT RECEIVED--
SELECT SUM(TOTAL_PAYMENT) AS TOTAL_AMOUNT_RECEIVED FROM LOAN_DATA
WHERE LOAN_STATUS =  "Charged Off";

-- BANK LOAN REPORT--
SELECT
	DATE_FORMAT(ISSUE_DATE, "%Y-%m") AS MONTH_YEAR,
    COUNT(ID) AS TOTAL_LOAN_APPLICATIONS,
    SUM(LOAN_AMOUNT) AS TOTAL_AMOUNT_FUNDED,
    SUM(TOTAL_PAYMENT) AS TOTAL_AMOUNT_RECEIVED
FROM LOAN_DATA
GROUP BY MONTH_YEAR
ORDER BY MONTH_YEAR;
    
-- LOAN-STATUS REPORT--

SELECT 
LOAN_STATUS,
COUNT(ID) AS TOTAL_APPLICATIONS,
SUM(LOAN_AMOUNT) AS TOTAL_AMOUNT_FUNDED,
SUM(TOTAL_PAYMENT) AS TOTAL_AMOUNT_RECEIVED,
AVG(INT_RATE)*100 AS AVG_INT_RATE,
ROUND(AVG(DTI)*100,2) AS AVG_DTI
FROM LOAN_DATA
GROUP BY LOAN_STATUS
ORDER BY TOTAL_AMOUNT_RECEIVED DESC;

-- STATE
SELECT 
	address_state AS State, 
	COUNT(id) AS Total_Loan_Applications,
	SUM(loan_amount) AS Total_Funded_Amount,
	SUM(total_payment) AS Total_Amount_Received
FROM loan_data
GROUP BY address_state
ORDER BY address_state;


-- TERM--
 SELECT term AS Term, 
	COUNT(id) AS Total_Loan_Applications,
	SUM(loan_amount) AS Total_Funded_Amount,
	SUM(total_payment) AS Total_Amount_Received
FROM loan_data
GROUP BY term
ORDER BY term;

-- PURPOSE
SELECT 
	purpose AS PURPOSE, 
	COUNT(id) AS Total_Loan_Applications,
	SUM(loan_amount) AS Total_Funded_Amount,
	SUM(total_payment) AS Total_Amount_Received
FROM loan_data
GROUP BY purpose
ORDER BY purpose;

-- HOME OWNERSHIP
SELECT 
	home_ownership AS Home_Ownership, 
	COUNT(id) AS Total_Loan_Applications,
	SUM(loan_amount) AS Total_Funded_Amount,
	SUM(total_payment) AS Total_Amount_Received
FROM loan_data
GROUP BY home_ownership
ORDER BY home_ownership